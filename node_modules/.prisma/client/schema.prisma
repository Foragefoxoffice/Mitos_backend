generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String?
  role      String    @default("user")
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  phoneNumber String? @unique
  age         Int?
  gender      String?
  profile     String?

  testResults TestResult[]
}

model questionType {
  id                 Int            @id @default(autoincrement())
  name               String
  parentId           Int?
  parent             questionType?  @relation("questionTypeToquestionType", fields: [parentId], references: [id], map: "questionType_parentId_fkey", onDelete: Cascade)
  other_questionType questionType[] @relation("questionTypeToquestionType")
  question           question[]
  createdAt          DateTime       @default(now())

  @@index([parentId], map: "questionType_parentId_fkey")
}

model portion {
  id        Int        @id @default(autoincrement())
  name      String
  subjects  subject[]  @relation("PortionSubjects")
  questions question[] @relation("PortionQuestions")
  pdfs      Pdf[]      @relation("PortionPdfs") // Added relation for PDFs
  createdAt DateTime   @default(now())

  @@index([id], map: "Portion_id_fkey")
}

model subject {
  id        Int        @id @default(autoincrement())
  name      String
  portionId Int
  chapters  chapter[]  @relation("subjectChapters")
  questions question[]
  pdfs      Pdf[]      @relation("SubjectPdfs") // Added relation for PDFs
  portion   portion    @relation("PortionSubjects", fields: [portionId], references: [id], map: "subject_portionId_fkey", onDelete: Cascade)
  createdAt DateTime   @default(now())

  @@index([id], map: "Subject_id_fkey")
  @@index([portionId], map: "subject_portionId_fkey")
}

model chapter {
  id        Int        @id @default(autoincrement())
  name      String
  subjectId Int
  questions question[]
  pdfs      Pdf[]      @relation("ChapterPdfs") // Added relation for PDFs
  subject   subject    @relation("subjectChapters", fields: [subjectId], references: [id], map: "chapter_subjectId_fkey", onDelete: Cascade)
  topics    topic[]    @relation("chapterTopics")
  createdAt DateTime   @default(now())

  @@index([subjectId], map: "chapter_subjectId_fkey")
}

model topic {
  id        Int        @id @default(autoincrement())
  name      String
  chapterId Int
  questions question[]
  pdfs      Pdf[]      @relation("TopicPdfs") // Added relation for PDFs
  chapter   chapter    @relation("chapterTopics", fields: [chapterId], references: [id], map: "topic_chapterId_fkey", onDelete: Cascade)
  createdAt DateTime   @default(now())

  @@index([chapterId], map: "topic_chapterId_fkey")
}

model question {
  id             Int          @id @default(autoincrement())
  questionTypeId Int
  portionId      Int
  subjectId      Int
  chapterId      Int
  topicId        Int
  question       String
  image          String?
  optionA        String
  optionB        String
  optionC        String
  optionD        String
  correctOption  String
  hint           String?
  hintImage      String?
  questionType   questionType @relation(fields: [questionTypeId], references: [id], map: "question_questionTypeId_fkey", onDelete: Cascade)
  portion        portion      @relation("PortionQuestions", fields: [portionId], references: [id], map: "question_portionId_fkey", onDelete: Cascade)
  subject        subject      @relation(fields: [subjectId], references: [id], map: "question_subjectId_fkey", onDelete: Cascade)
  chapter        chapter      @relation(fields: [chapterId], references: [id], map: "question_chapterId_fkey", onDelete: Cascade)
  topic          topic        @relation(fields: [topicId], references: [id], map: "question_topicId_fkey", onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@index([questionTypeId], map: "Question_questionTypeId_fkey")
  @@index([portionId], map: "Question_portionId_fkey")
  @@index([subjectId], map: "Question_subjectId_fkey")
  @@index([chapterId], map: "Question_chapterId_fkey")
  @@index([topicId], map: "Question_topicId_fkey")
}

model Pdf {
  id        Int      @id @default(autoincrement())
  name      String
  url       String // URL or file path to the PDF
  portionId Int?
  subjectId Int?
  chapterId Int?
  topicId   Int?
  portion   portion? @relation("PortionPdfs", fields: [portionId], references: [id], map: "Pdf_portionId_fkey", onDelete: Cascade)
  subject   subject? @relation("SubjectPdfs", fields: [subjectId], references: [id], map: "Pdf_subjectId_fkey", onDelete: Cascade)
  chapter   chapter? @relation("ChapterPdfs", fields: [chapterId], references: [id], map: "Pdf_chapterId_fkey", onDelete: Cascade)
  topic     topic?   @relation("TopicPdfs", fields: [topicId], references: [id], map: "Pdf_topicId_fkey", onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([portionId], map: "Pdf_portionId_fkey")
  @@index([subjectId], map: "Pdf_subjectId_fkey")
  @@index([chapterId], map: "Pdf_chapterId_fkey")
  @@index([topicId], map: "Pdf_topicId_fkey")
}

model TestResult {
  id               Int      @id @default(autoincrement())
  userId           Int
  score            Int
  totalMarks       Int
  answered         Int
  correct          Int
  wrong            Int
  unanswered       Int
  accuracy         Float
  totalTimeTaken   Int
  resultsByType    Json
  resultsByChapter Json
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id], map: "TestResult_userId_fkey", onDelete: Cascade)

  @@index([userId], map: "TestResult_userId_fkey")
}
